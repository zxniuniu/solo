{"relevantArticles":[{"articleTitle":"JedisPool资源池优化及常见问题汇总","articleAbstractText":"合理的 JedisPool 资源池参数设置能为业务使用 Redis 保驾护航，本文将对 JedisPool 的使用、资源池的参数进行详细说明，最后给出\u201c最合理\u201d配置。 并同时对 Jedis 使用中常见的问题进行了汇总，以方便后期查看。","articleStatus":0,"articlePermalink":"/articles/2019/03/12/1552377395451.html","articleImg1URL":"https://img.hacpai.com/file/2019/03/9dac508bb5669a6e690bdbbedf6e98c82581e1e1-69ab7474.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"搭建Tomcat集群&通过Redis缓存共享session的一种流行方案","articleAbstractText":"我们使用单台 Tomcat 的时候不会有共享 sesssion 的疑虑，只要使用 Tomcat 的默认配置即可，session 即可存储在 Tomcat 上。但是随着业务的扩大，增加 Tomcat 节点构成 Tomcat 集群大势所趋，分布式带来了增加更大规模并发请求的优势，但是也随之到来了一个问题，每个 Tomcat 只存储来访问自己的请求产生的 session，如果 Tomcat-A 已经为客户端 C 创建了会话 session，那么 Tomcat-B 并不知道客户端已与集群中的 Tomcat-A 产生了会话，在访问时就会为 C 再创建一份 session，如果是基于 session 的验证会话权限的接口(如用户登录认证后才可访问的数据接口)，将会导致在访问集群中不同节点的时候重复认证。session 的不共享导致原来的会话管理机制在 Tomcat 集群中无法工作。","articleStatus":0,"articlePermalink":"/articles/2019/02/02/1549081414704.html","articleImg1URL":"https://raw.githubusercontent.com/zxniuniu/solo/master/326c3878d3de44b3a5779e37973fb670_4139826312592ba7407981c_articlex.jpg"},{"articleTitle":"Redis高可用集群、哨兵模式（Redis-Sentinel）搭建配置详解","articleAbstractText":"由于本地环境的使用，所以搭建一个本地的 Redis 集群，本篇讲解 Redis 主从复制集群的搭建，使用的平台是 Windows。为了使得集群在一部分节点下线或者无法与集群的大多数节点进行通讯的情况下， 仍然可以正常运作， Redis 集群对节点使用了主从复制功能： 集群中的每个节点都有 1 个至 N 个复制品（replica）， 其中一个复制品为主节点（master）， 而其余的 N-1 个复制品为从节点（slave）。","articleStatus":0,"articlePermalink":"/articles/2019/02/02/1549076687909.html","articleImg1URL":"https://raw.githubusercontent.com/zxniuniu/solo/master/807b1e329290418889f72c4a654e9ca7_wKiom1N3nPbS5JMAAHj5MGbf50000.jpg"},{"articleTitle":"Why Redis beats Memcached for caching","articleAbstractText":"Memcached or Redis? It\u2019s a question that nearly always arises in any discussion about squeezing more performance out of a modern, database-driven Web application. When performance needs to be improved, caching is often the first step taken, and Memcached or Redis are typically the first places to turn.  These renowned cache engines share a number of similarities, but they also have important differences. Redis, the newer and more versatile of the two, is almost always the superior choice.","articleStatus":0,"articlePermalink":"/articles/2019/02/02/1549069716678.html","articleImg1URL":"https://images.techhive.com/images/article/2016/03/thinkstockphotos-480601933-100648010-large.jpg"},{"articleTitle":"Springboot 使用 Logback 自动同步指定级别日志到 MariaDB 数据库","articleAbstractText":"为方便问题排查与分析，有时候需要把符合条件的指定级别日志自动持久化到数据库中。本文使用logback的DBAppender，以及AsyncAppender实现WARN以上级别的日志自动异步到指定的数据库中。","articleStatus":0,"articlePermalink":"/articles/2020/03/25/1585146340397.html","articleImg1URL":"https://img.hacpai.com/bing/20181226.jpg?imageView2/1/w/960/h/240/interlace/1/q/100"},{"articleTitle":"MySQL Group Replication, Single-Primary or Multi-Primary, how to make the right decision?","articleAbstractText":"By default MySQL Group Replication runs in Single-Primary mode. And it\u2019s the best option and the option you should use. But sometimes it might happen that in very specific cases you would like to run you MGR Cluster in Multi-Primary mode: writing simultaneously on all the nodes member of the Group.","articleStatus":0,"articlePermalink":"/articles/2019/03/21/1553148807220.html","articleImg1URL":"https://img.hacpai.com/file/2019/03/IMG7071b-437dba13.jpg?imageView2/2/w/1280/format/jpg/interlace/1?imageView2/2/w/1280/format/jpg/interlace/1"},{"articleTitle":"Understanding \u2013 Group Replication and InnoDB Cluster","articleAbstractText":"In this blog post, I\u2019d like to show some relationships of \u201cGroup Replication\u201d and \u201cInnoDB Cluster\u201c. My hope is that I will be able to draw meaningful correlations and attempt to simplify our way of thinking about these setups.","articleStatus":0,"articlePermalink":"/articles/2019/03/16/1552743939239.html","articleImg1URL":"https://img.hacpai.com/bing/20180825.jpg?imageView2/1/w/960/h/340/interlace/1/q/100"},{"articleTitle":"MySQL InnoDB Cluser 多主模式实现高可用负载均衡","articleAbstractText":"MySQL 的 Group Replication 功能，可以在一组 MySQL 服务器之间实现自动主机选举，形成一主多从结构。经过高级配置后，可以实现多主多从结构。 MySQL Router 是一个轻量级透明中间件，可以自动获取上述集群的状态，规划 SQL 语句，分配到合理的 MySQL 后端进行执行。 MySQL Shell 是一个同时支持 JavaScript 和 SQL 的交互程序，可以快速配置 InnoDB Cluster。","articleStatus":0,"articlePermalink":"/articles/2019/03/16/1552738515472.html","articleImg1URL":"https://img.hacpai.com/file/2019/03/1493998183242301b-2c2c8312.png?imageView2/2/w/1280/format/jpg/interlace/1?imageView2/2/w/1280/interlace/1/format/webp"},{"articleTitle":"Windows Server 搭建 MySQL集群","articleAbstractText":"最近在项目中用到了 MySQL 集群，所以研究了两天。下面给大家分享一下成果，先来看一张 MySQL 集群的架构图：","articleStatus":0,"articlePermalink":"/articles/2019/02/23/1550894766125.html","articleImg1URL":"https://img.hacpai.com/file/2019/02/9bf6a83d6004ff7b5dc03b48e8e45247-d1beecbc.jpg?imageView2/2/w/1280/format/jpg/interlace/1/q/100?imageView2/2/w/1280/format/jpg/interlace/1/q/100"}]}