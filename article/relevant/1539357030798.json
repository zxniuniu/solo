{"relevantArticles":[{"articleTitle":"记一次WebDriver无法正常加载www.xxx.com域名Cookie文件的解决办法","articleAbstractText":"具体问题为，在使用 WebDriver 正常登录网址后，进行了 Cookie 保存，但在下次自动反序列化加载 Cookie 时发现无法正常加载，导致每次需要重新登录验证，目前采用了一种曲线救国的方式，在序列化 Cookie 时调整域名为 xxx.com，具体方案如下。","articleStatus":0,"articlePermalink":"/articles/2019/05/29/1559101766149.html","articleImg1URL":"https://img.hacpai.com/bing/20190522.jpg?imageView2/1/w/960/h/270/interlace/1/q/100"},{"articleTitle":"OpenResty中的ngx.location.capture和ngx.location.capture_multi使用","articleAbstractText":"= 表示将 URI 作为字符串，以便于参数中的 URI 做完全匹配。 ~ 表示匹配 URI 时，字母大小写是敏感的。 ~*表示匹配 URI 时，忽略字母大小写。 ^~ 表示匹配 URI 时，只需要前半部分与 uri 参数匹配即可。 @表示用于 nginx 服务器内部请求之间的重定向，带有@的 location 不直接处理用户请求。 uri 参数可以使用正则表达式。 使用 locaiton / {}可以匹配所有的请求。 首先匹配 =，其次匹配 ^~, 其次是按文件中顺序的正则匹配，最后是交给 / 通用匹配。当有匹配成功时候，停止匹配，按当前匹配规则处理请求。 = 精确匹配会第一个被处理。如果发现精确匹配，nginx 停止搜索其他匹配。 普通字符匹配，正则表达式规则和长的块规则将被优先和查询匹配，也就是说如果该项匹配还需去看有没有正则表达式匹配和更长的匹配。","articleStatus":0,"articlePermalink":"/articles/2019/02/21/1550713663087.html","articleImg1URL":"https://img.hacpai.com/bing/20180507.jpg?imageView2/1/w/960/h/340/interlace/1/q/100"},{"articleTitle":"SS、SSR链接解析，查看对应密码、端口、协议","articleAbstractText":"网上有很多人会分享一些免费的 ss/ssr 免费账号，有的会直接把服务、端口、ip、协议等展示出来（对于这种，直接手动输入相应参数就可以了），有的则直接显示二维码（二维码更方便，直接用客户端软件扫一下就可以使用）。  不过，也有很多是直接以链接的形式展示出来，比如 ss://xxxxx 或 ssr://xxxx,对于这种链接的方式，复制链接后，然后直接使用 ss 、ssr 客户端软件导入链接即可。以 ssr 链接为例，假设有这么一个链接（以下的 ss ssr 链接都转载至 https://doub.io/sszhfx/）。","articleStatus":0,"articlePermalink":"/articles/2018/10/24/1540351937866.html","articleImg1URL":"https://img.hacpai.com/bing/20180614.jpg?imageView2/1/w/960/h/520/interlace/1/q/100"},{"articleTitle":"SS/SSR中转V2ray起飞教程","articleAbstractText":"目前市面上已经有很多机场（提供 SS/SSR 服务的网站），且不乏众多公益机场，这些机场因为拥有一些好线路的服务器，所以在使用的时候可以获得较好的突破网络封锁的体验。本文的初衷是规避使用机场时流量隐私泄露的问题\u2014\u2014如何使用机场服务的同时不暴露自己的流量隐私。","articleStatus":0,"articlePermalink":"/articles/2019/05/23/1558608311047.html","articleImg1URL":"https://img.hacpai.com/file/2019/05/ssssrtov2ray-76f51eaf.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"如何突破网站对Selenium的屏蔽","articleAbstractText":"使用selenium模拟浏览器进行数据抓取无疑是当下最通用的数据采集方案，它通吃各种数据加载方式，能够绕过客户JS加密，绕过爬虫检测，绕过签名机制。它的应用，使得许多网站的反采集策略形同虚设。由于selenium不会在HTTP请求数据中留下指纹，因此无法被网站直接识别和拦截。  这是不是就意味着selenium真的就无法被网站屏蔽了呢？非也。selenium在运行的时候会暴露出一些预定义的Javascript变量（特征字符串），例如\"window.navigator.webdriver\"，在非selenium环境下其值为undefined，而在selenium环境下，其值为true（如下图所示为selenium驱动下Chrome控制台打印出的值）。","articleStatus":0,"articlePermalink":"/articles/2018/10/12/1539355419624.html","articleImg1URL":"https://img.hacpai.com/bing/20180510.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Injecting Javascript In HTML Content Using Mitmproxy","articleAbstractText":"An interactive console program that allows traffic flows to be intercepted, inspected, modified and replayed. So basically it gives the proxy administartor the power to modify any traffic that goes through the proxy. You can play with html content, inject elements, get header data, modify headers, dns spoofing, traffic filteration, redirection and a lot more things you can do with mitmproxy.","articleStatus":0,"articlePermalink":"/articles/2018/10/11/1539269886178.html","articleImg1URL":"https://img.hacpai.com/bing/20171225.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"解决梯子在GFWList模式下不能正常看流媒体的问题","articleAbstractText":"客户端使用 GFWList 模式时观看流媒体。 问题描述：  当使用全局模式或大陆白名单模式时，可以观看流媒体 当使用 GFWList 模式时，无法观看（例如 HBO NOW） 当使用 GFWList 模式时，可以观看，但有卡顿（例如 YouTube）","articleStatus":0,"articlePermalink":"/articles/2018/10/26/1540532958285.html","articleImg1URL":"https://i2.wp.com/myharbour.net/wp-content/uploads/2018/06/HBO-NOW.jpg?resize=1060%2C596"},{"articleTitle":"Javascript Injection With Selenium, Puppeteer, And Marionette In Chrome And Firefox","articleAbstractText":"Browser automation frameworks\u2013like Puppeteer, Selenium, Marionette, and Nightmare.js\u2013strive to provide rich APIs for configuring and interacting with Web browsers. These generally work quite well, but you\u2019re inevitably going to end up running into API limitations if you do a lot of testing or Web scraping. You might find yourself wanting to conceal the fact that you\u2019re using a headless browser, extract image resources from a Web page, set the seed for Math.random(), or mock the browser\u2019s geoloca....","articleStatus":0,"articlePermalink":"/articles/2018/10/12/1539357955729.html","articleImg1URL":"https://img.hacpai.com/bing/20180504.jpg?imageView2/1/w/960/h/520/interlace/1/q/100"},{"articleTitle":"使用 Mitmproxy 和 Python 做拦截代理","articleAbstractText":"本文是一个较为完整的 Mitmproxy 教程，侧重于介绍如何开发拦截脚本，帮助读者能够快速得到一个自定义的代理工具。 本文假设读者有基本的 python 知识，且已经安装好了一个 Python3 开发环境。","articleStatus":0,"articlePermalink":"/articles/2018/10/10/1539183788285.html","articleImg1URL":"https://img.hacpai.com/bing/20181017.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Java 配合 Mitmproxy 实现 HTTPS 抓包调试","articleAbstractText":"mitmproxy 是一个命令行下的强大抓包工具，可以在命令行下抓取 HTTP(S) 数据包并加以分析；对于 HTTPS 抓包，首先要在本地添加 mitmproxy 的根证书，然后 mitmproxy 通过以下方式进行抓包","articleStatus":0,"articlePermalink":"/articles/2018/10/10/1539181755175.html","articleImg1URL":"https://mritd.b0.upaiyun.com/markdown/x7lir.jpg"}]}